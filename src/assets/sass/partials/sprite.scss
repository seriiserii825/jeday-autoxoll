// SCSS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home {
//   width: $icon-home-width;
// }
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path;
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites;
$s-01-map-name: 's-01.map';
$s-01-map-x: 0px;
$s-01-map-y: 0px;
$s-01-map-offset-x: 0px;
$s-01-map-offset-y: 0px;
$s-01-map-width: 30px;
$s-01-map-height: 50px;
$s-01-map-total-width: 95px;
$s-01-map-total-height: 90px;
$s-01-map-image: '../i/sprite.png';
$s-01-map: (0px, 0px, 0px, 0px, 30px, 50px, 95px, 90px, '../i/sprite.png', 's-01.map', );
$s-02-photo-name: 's-02.photo';
$s-02-photo-x: 50px;
$s-02-photo-y: 0px;
$s-02-photo-offset-x: -50px;
$s-02-photo-offset-y: 0px;
$s-02-photo-width: 45px;
$s-02-photo-height: 30px;
$s-02-photo-total-width: 95px;
$s-02-photo-total-height: 90px;
$s-02-photo-image: '../i/sprite.png';
$s-02-photo: (50px, 0px, -50px, 0px, 45px, 30px, 95px, 90px, '../i/sprite.png', 's-02.photo', );
$s-03-about-name: 's-03.about';
$s-03-about-x: 0px;
$s-03-about-y: 70px;
$s-03-about-offset-x: 0px;
$s-03-about-offset-y: -70px;
$s-03-about-width: 21px;
$s-03-about-height: 20px;
$s-03-about-total-width: 95px;
$s-03-about-total-height: 90px;
$s-03-about-image: '../i/sprite.png';
$s-03-about: (0px, 70px, 0px, -70px, 21px, 20px, 95px, 90px, '../i/sprite.png', 's-03.about', );
$spritesheet-width: 95px;
$spritesheet-height: 90px;
$spritesheet-image: '../i/sprite.png';
$spritesheet-sprites: ($s-01-map, $s-02-photo, $s-03-about, );
$spritesheet: (95px, 90px, '../i/sprite.png', $spritesheet-sprites, );

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home {
//   @include sprite-width($icon-home);
// }
//
// .icon-email {
//   @include sprite($icon-email);
// }
//
// Example usage in HTML:
//
// `display: block` sprite:
// <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//
// // CSS
// .icon {
//   display: inline-block;
// }
//
// // HTML
// <i class="icon icon-home"></i>
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SCSS
//
// @include sprites($spritesheet-sprites);
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
